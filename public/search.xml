<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[webpack4从头构建一个简单的vue2项目]]></title>
    <url>%2F2019%2F04%2F20%2Fwebpack4%E4%BB%8E%E5%A4%B4%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84vue2%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[前言vue早就有成熟的vue-cli工具了，现在是vue-cli 3.0了，但是觉得很有必要自己去实现一下，有助于自己技术的提高，也能更好地去了解webpack。本人是webpack菜鸟，有些资料是网上学习整理过来的。 1.新建目录文件夹第一步当然是新建工程目录了，具体怎么建就随便了，比如我建立webpackVue这个目录 2.新建package.json文件package.json是nodejs项目必需的配置文件。使用npm init,按照提示一步步填写项目名称，作者等信息 3.webpack配置新建build文件夹build目录下新建webpack.base.conf.js,webpack.dev.conf.js,webpack.prod.conf.js文件，webpack.base.conf.js是公共基础配置，webpack.dev.conf.js是生产环境配置文件，webpack.prod.conf.js是生产环境配置。创建一个src目录，用来存放我们的项目源文件，然后创建main.js文件，创建一个index.html123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;webpack4搭建vue&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 目录结构是这样的 下载webpack webpack-dev-server webpack-cli (这里webpack是局部安装)npm i webpack webpack-dev-server webpack-cli -D打开webpack.base.config.js，逐步添加配置12345678910111213141516171819202122var path = require(&apos;path&apos;);var webpack = require(&apos;webpack&apos;);module.exports =&#123; //入口文件 entry:&#123; main: path.resolve(__dirname, &apos;../src/main.js&apos;) &#125;, //输出目录 output:&#123; path: path.resolve(__dirname, &apos;../dist&apos;), filename: &apos;[name].[hash].js&apos; &#125;, module:&#123; rules:[] &#125;, plugins:[ new webpack.HashedModuleIdsPlugin(), // 解决vender后面的hash每次都改变 ], resolve:&#123; &#125;&#125; 4.配置loader配置babel编译代码：下载babel-loader，babel-core，babel-preset-dev。npm i babel-loader babel-core babel-preset-env -D babel-preset-env 帮助我们配置 babel。我们只需要告诉它我们要兼容的情况（目标运行环境），它就会自动把代码转换为兼容对应环境的代码。babel-core是作为babel的核心存在，babel的核心api都在这个模块里面这里有个注意的地方，就是babel的版本的问题，运行的时候根据提示安装合适的版本就好了，这里不记得是babel的哪个工具需要7的版本了。在webpack.base.conf.js文件中增加babel配置1234567rules:[ &#123; test: /\.js$/, //匹配.js结尾的文件 use: [&apos;babel-loader&apos;], exclude:/node_modules/ //排除node_modules里面的js &#125;,] 新建.babelrc文件，.babelrc是babel全局配置文件123456789101112&#123; &quot;presets&quot;:[ [&quot;env&quot;,&#123; &quot;targets&quot;: &#123; &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;=8&quot;], //&quot;chrome&quot;: 52, //&quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;safari 7&quot;] &#125;, &quot;modules&quot;: false &#125;] ]&#125; 下载file-loadernpm i file-loader -D继续追加配置123456789rules:[ &#123; test: /\.(jpg|png|svg|gif)$/, use:[&apos;file-loader&apos;] &#125;, &#123; test:/\.(woff|woff2|eot|ttf|otf)$/ &#125;,] 下载css-loader，vue-style-loader，sass-loader， node-sass，less，less-loader并配置css，scss，sass,lessnpm i css-loader vue-style-loader sass-loader node-sass less-loader less -D12345678910111213141516171819202122rules:[ &#123; test:/\.(sa|sc|c)ss$/, use:[ &#123; loader: &apos;vue-style-loader&apos; &#125;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] &#125;, &#123; test:/\.less$/, use:[ &#123; loader: &apos;vue-style-loader&apos; &#125;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] &#125;,] 5.处理html文件下载html-webpack-pluginnpm i html-webpack-plugin -D1234var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;); //在base配置文件头部引入new HtmlWebpackPlugin(&#123; template: path.resolve(__dirname, &apos;../index.html&apos;)&#125;), 6.解析模块的配置和配置别名12345678910resolve: &#123; // 能够使用户在引入模块时不带扩展 extensions: [&apos;.js&apos;, &apos;.json&apos;, &apos;.vue&apos;, &apos;css&apos;], //别名 alias: &#123; &apos;vue$&apos;:&apos;vue/dist/vue.esm.js&apos;, &apos;@&apos;: path.resolve(__dirname, &apos;../src&apos;) &#125; &#125; 7.配置webpack.dev.conf.js文件下载 webpack-merge，用于合并配置npm i webpack-merge -D12345678910111213141516var merge = require(&apos;webpack-merge&apos;);var baseConfig = require(&apos;./webpack.base.conf&apos;);var path = require(&apos;path&apos;);var webpack = require(&apos;webpack&apos;);module.exports = merge(baseConfig, &#123; devtool: &apos;inline-source-map&apos;, // 压缩方式 mode: &apos;development&apos;, devServer: &#123; hot: true, // 热更新 open: true, // 自动打开页面 contentBase: path.resolve(__dirname, &apos;../src&apos;), // 告诉服务从哪提供内容 &#125;, plugins: [ new webpack.HotModuleReplacementPlugin(), //开启热更新 ]&#125;) 8.配置webpack.prod.conf.js1234567891011var merge = require(&apos;webpack-merge&apos;);var baseConfig = require(&apos;./webpack.base.conf&apos;);var path = require(&apos;path&apos;);var webpack = require(&apos;webpack&apos;);module.exports = merge(baseConfig, &#123; devtool: &apos;source-map&apos;, // 压缩方式 mode: &apos;production&apos;, plugins: [ ]&#125;) 9.配置vue-loader首先要下载vue，以及vue相关的模块npm i vue vue-loader vue-template-compiler -D继续完善webpack.base.cond.js12345678910111213var VueLoaderPlugin=require(&apos;vue-loader/lib/plugin&apos;);//省略部分代码...rules:[ &#123; test: /\.vue$/, use: [&apos;vue-loader&apos;], exclude: /node_modules/ &#125;,]//省略部分代码...plugins:[ new VueLoaderPlugin(), // 它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块] 在src目录新建app.vue文件和main.js文件12345678910111213141516171819//app.vue&lt;template&gt; &lt;div&gt;&#123;&#123;str&#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123; name: &apos;App&apos;, data () &#123; return &#123; str: &apos;欢迎来到自定义webpack4+vue构建&apos; &#125; &#125; &#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot;&gt; div &#123; color: red; &#125;&lt;/style&gt; 12345678//main.jsimport Vue from &apos;vue&apos;import App from &apos;./App&apos;new Vue(&#123; el: &quot;#app&quot;, render: (h) =&gt; h(App)&#125;) 10.配置命令打开package.json文件，并配置开发和打包命令12345// 省略代码。。。&quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;webpack-dev-server --progress --config build/webpack.dev.conf.js&quot;, &quot;build&quot;: &quot;webpack --config build/webpack.prod.conf.js&quot; &#125; npm run dev 就可以启动项目了 继续优化…11. 区分环境引入不同地址新建config文件夹并新建dev.env.js和prod.env.js1234567//dev.env.js 开发环境配置&apos;use strict&apos;module.exports = &#123; NODE_ENV: &quot;development&quot;, BASE_API: &quot;http://1456&quot;,&#125; 123456//prod.env.js 生产环境配置&apos;use strict&apos;module.exports = &#123; NODE_ENV: &quot;production&quot;, BASE_API: &quot;http://123.com&quot;,&#125; 12.优化webpack配置解决更改文件打包时dist文件没有清除，再次打包。下载clean-webpack-plugin，并配置webpack.prod.conf.js文件npm i clean-webpack-plugin -D 1234567//webpack.prod.conf.js// 引入clean-webpack-pluginvar CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;);// 省略代码。。。。plugins: [ new CleanWebPackPlugin();] 根据不同环境提取css下载mini-css-extract-plugin，并配置webpack.prod.conf.js文件npm i mini-css-extract-plugin -D12345678910111213141516171819202122232425262728293031//webpack.prod.conf.jsconst MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);module: &#123; rules: [ &#123; test: /\.(c|sc|sa)ss$/, use: [ &#123; loader: MiniCssExtractPlugin.loader, &#125;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] &#125;, &#123; test: /\.less$/, use: [ &#123; loader: MiniCssExtractPlugin.loader, &#125;, &apos;css-loader&apos;, &apos;less-loader&apos; ] &#125; ]&#125;,plugins: [ new MiniCssExtractPlugin(&#123; filename: &apos;[name].[hash].css&apos; &#125;)] webpack.base.conf.js中删除使用vue-style-loader的代码，并在webpack.dev.conf.js中定义 12345678910111213141516171819202122232425module: &#123; rules: [ &#123; test: /\.(c|sc|sa)ss$/, use: [ &#123; loader: &apos;vue-style-loader&apos;, &#125;, &apos;css-loader&apos;, &apos;sass-loader&apos; ] &#125;, &#123; test: /\.less$/, use: [ &#123; loader: &apos;vue-style-loader&apos;, &#125;, &apos;css-loader&apos;, &apos;less-loader&apos; ] &#125; ] &#125;,//以上这段webpack.base.conf.js中的代码移到webpack.dev.conf.js中 这个配置vue-loader中有提到 第三方库单独打包把依赖的第三方库抽取出来单独打包，加快打包进度下载autodll-webpack-pluginnpm i autodll-webpack-plugin -D 在webpack.base.conf.js中配置1234567891011121314//webpack.base.conf.js//省略部分代码var AutodllWebpackpackPlugin = require(&apos;autodll-webpack-plugin&apos;);plugins: [ new AutodllWebpackpackPlugin (&#123; inject: true, debugger: true, filename: &apos;[name].js&apos;, path: &apos;./dll&apos;, entry: &#123; vendor: [&apos;vue&apos;] &#125; &#125;)] tips: inject 为 true，插件会自动把打包出来的第三方库文件插入到 HTML。filename 是打包后文件的名称。path 是打包后的路径。entry 是入口，vendor 是你指定的名称，数组内容就是要打包的第三方库的名称，不要写全路径，Webpack 会自动去 node_modules 中找到的。 提取公共代码在 webpack.base.conf.js的 plugins 属性中添加如下插件对象new webpack.optimize.SplitChunksPlugin() 打包时压缩js和css下载optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin npm i uglifyjs-webpack-plugin uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin -D 在webpack.prod.conf.js中分别引入optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin并增加optimization1234567891011121314151617181920212223//webpack.prod.conf.jsvar OptimizeCSSAssetsPlugin = require(&quot;optimize-css-assets-webpack-plugin&quot;);var UglifyJsPlugin = require(&quot;uglifyjs-webpack-plugin&quot;);// 省略部分代码optimization: &#123; minimizer: [ // 压缩JS new UglifyJsPlugin(&#123; uglifyOptions: &#123; compress: &#123; warnings: false, // 去除警告 drop_debugger: true, // 去除debugger drop_console: true // 去除console.log &#125;, &#125;, cache: true, // 开启缓存 parallel: true, // 平行压缩 sourceMap: false // set to true if you want JS source maps &#125;), // 压缩css new OptimizeCSSAssetsPlugin(&#123;&#125;) ]&#125;, css自动加前缀下载postcss-loader 和autoprefixernpm i postcss-loader autoprefixer -D分别在webpack.dev.conf.js和webpack.prod.conf.js的use中添加postcss-loader在module中的rules中的use中追加：123use: [ &apos;postcss-loader&apos;] 在项目下增加postcss.config.js123456// 配置cssz加前缀module.exports = &#123; plugins: [ require(&apos;autoprefixer&apos;) ]&#125; 差不多就这样了,对了，还有一点就是打包出来的html里面引用/dll/vendor.js需要手动改成./dll/vendor.js这个下次也要优化下，我记得vue-cli 2版本中有一个地方是可以配置的]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>webpack</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实现一个简单的深拷贝]]></title>
    <url>%2F2019%2F03%2F30%2F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[在js中经常需要用到变量的拷贝，比如var a=1;var b=a; 这个时候修改b的值，a不会改变b=2;console.log(a); //1,但是需要注意，这种方式拷贝属于浅拷贝，只局限在简单类型的拷贝：string、number、boolean、null、undefiend。如果你用这种方式拷贝一个数组或者对象，那么就得注意了，1234var a=[1,2,3]; var b=a;b[0]=66;console.log(a); //[66,2,3]; 可以看到，b的值变了，a也变了，所以对于数组和对象不能用这种浅拷贝，因为拷贝的只是引用地址，实际上还是同一个，不过在有一种情况下，修改复制后的变量，被复制的变量不会跟着改变，那就是复制后，给复制变量重新定义值得时候，原来的变量不会受影响，因为此时已经给复制后的变量重新分配指针了，如下面所示：123456789101112131415161718var arr = [1,2,3,4];var arr_copy = arr ;arr_copy = [1,2,3,4,5];console.log(arr); //[1,2,3,4]console.log(arr_copy);//[1,2,3,4,5]var obj = &#123; name:&apos;张三&apos;, age:20&#125;;var obj_copy = obj ;obj_copy = &#123; name:&apos;李四&apos;, age:20&#125;;console.log(obj.name);//张三console.log(obj_copy.name);//李四 使用递归进行深拷贝。1234567891011121314151617181920212223242526272829303132var car = &#123; name : &apos;宝马&apos;, color:&apos;红色&apos;,&#125;//判断是数组还是对象function getType(obj)&#123; if(Object.prototype.toString.call(obj)==&apos;[object Object]&apos;)&#123; return &apos;Object&apos;; &#125;else if(Object.prototype.toString.call(obj)==&apos;[object Array]&apos;)&#123; return &apos;Array&apos;; &#125;else&#123; return &apos;nomal&apos;; &#125;&#125;function deepCopy(obj) &#123; if (getType(obj)==&apos;nomal&apos;) &#123; return obj ; //如果是基本类型则直接返回 &#125;else&#123; var newObj = getType(obj)==&apos;Object&apos;?&#123;&#125;:[]; for(var key in obj)&#123; if(obj.hasOwnProperty(key))&#123; newObj[key] = deepCopy(obj[key]); //递归 &#125; &#125; &#125; return newObj;&#125;var newCar = deepCopy(car) ;newInfo.name = &apos;奔驰&apos;;console.log(newCar); //&#123;name:&apos;奔驰&apos;,color:&apos;红色&apos;&#125;console.log(car);//&#123;name:&apos;宝马&apos;,color:&apos;红色&apos;&#125; 这里用到.hasOwnProperty是为了避免在有继承时拷贝到继承自对象中的值（也就是a继承b时,使用.hasOwnProperty就是为了只拷贝a中的变量，过滤继承自b中的变量）]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[["1", "2", "3"].map(parseInt)报错问题解决办法]]></title>
    <url>%2F2019%2F03%2F30%2F1-2-3-map-parseInt-%E6%8A%A5%E9%94%99%E9%97%AE%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[第一次使用 [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt)时，以为会得到[1,2,3]这个结果，结果很不幸得到的是[1,NaN,NaN]，为什么会这样呢，其实是因为map函数传递的是三个参数value,index,arry,而parseInt函数传递的是value,radix，radix不传时默认使用10，表示十进制，但是如果radix在2-36之外会返回NaN。好了，既然已经知道了原因，那么应该怎么修改，才能得到正确的结果呢，很简单，把map和parseIntDe完整参数写出来就可以了[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map((value,index,array)=&gt;parseInt(value,10)); 给parseInt指定10进制，用es5的写法则是123[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(function(value,index,array)&#123; return parseInt(value,10)&#125;); //返回 [1,2,3]]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js判断一个变量是对象还是数组的实用方法记录]]></title>
    <url>%2F2019%2F03%2F14%2Fjs%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E5%AF%B9%E8%B1%A1%E8%BF%98%E6%98%AF%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%94%A8%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[在实际开发中，经常需要检测一个变量的类型，是字符串、数字、布尔还是对象、数组？还是null、undefined？ 对于字符串和数字、布尔这种基本类型，用typeof()来检测就足够了，但是typeof用在数组和对象、null之间就不灵了。由图中可以看出，变量为null，数组，对象的abc使用typeof检测出来的都是object，没有办法进一步区分。 使用constructor检测 1234var arr=[1,2];var obj=&#123;&#125;;console.log(arr.constructor === Array) //trueconsole.log(obj.constructor === Array) //false 使用instanceof1234 var arr=[1,2]; var obj=&#123;&#125;; console.log(arr instanceof Array); //trueconsole.log(obj instanceof Array); //false constructor和instanceof 在iframe下使用时会失效，每个iframe都有一套环境，都有一个window，不共享原型链。 下面的代码取自网络123456var iframe = document.createElement(&apos;iframe&apos;); //创建iframedocument.body.appendChild(iframe); //添加到body中xArray = window.frames[window.frames.length-1].Array;var arr = new xArray(1,2,3); // 声明数组[1,2,3]alert(arr instanceof Array); // falsealert(arr.constructor === Array); // false 为什么会出现这样的情况呢？原因就是：在当前窗口引入框架，其实就是引入了window对象，当我们在遍历iframe框架里的变量时使用arr instanceof Array 或者arr.constructor === Array，要注意这个Array是当前window对象的Array，而不是构造出arr的iframe里的window，所以会返回false。 使用toString方法1234 var arr=[1,2]; var obj=&#123;&#125;; console.log(Object.prototype.toString.call(arr)); // &quot;[object Array]&quot;console.log(Object.prototype.toString.call(obj)); // &quot;[object Object]&quot; 使用Array.isArray()ECMAScript5将Array.isArray()正式引入JavaScript，目的就是准确地检测一个值是否为数组。IE9+、 Firefox 4+、Safari 5+、Opera 10.5+和 Chrome都实现了这个方法。但是在IE8之前的版本是不支持的。 综合上述方法，自己封装一个函数1234567891011121314var arr = [];var arr2 = &#123;&#125;;function isArrayFn(value)&#123; if (typeof Array.isArray === &quot;function&quot;) &#123; //先检测是否有isArray方法 return Array.isArray(value); &#125;else&#123; //不支持isArray方法，则使用toString方法 return Object.prototype.toString.call(value) === &quot;[object Array]&quot;; //如果是对象则是&quot;[object Object]&quot; &#125;&#125;console.log(isArrayFn(arr)); // trueconsole.log(isArrayFn(arr2)); // false]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用hexo+github搭建个人博客]]></title>
    <url>%2F2019%2F02%2F27%2F%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[用hexo+github page快速搭建个人静态博客1.hexo环境搭建首先需要电脑安装好了nodejs（具体安装步骤略过），还需要有github账号。打开cmd命令行，全局安装hexo npm install -g hexo-cli 可以使用 hexo v 来检查是否安装成功。接下来使用hexo cli来创建项目：使用hexo init 就会在当前文件夹下创建了项目，当然也可以使用hexo init 文件夹名称 来创建文件夹的同时创建项目。接着运行 npm install安装依赖，注意，安装hexo的文件夹需要是空文件夹。 2.hexo的基本使用及常见的命令hexo s 使用这个命令可以在本地跑起来，可以看到cmd窗口提示项目运行在 http://localhost:4000，打开浏览器输入提示的地址即可访问了，不过可以看到，默认的主题有点丑，我们可以换一个，在这里我们换next这个简洁的主题。我们可以直接百度搜索hexo next主题官网或者去hexo官网找next主题都可以，我们找到next的github，克隆下来，放到博客项目的themes目录下，接下来打开根目录的配置文件_config.yml文件找到 theme，把默认的该为next，然后命令行hexo clean &amp;&amp; hexo s刷新页面即可成功替换主题了。快速创建文章命令为 hexo new &quot;文章名字&quot; 执行完这个命令后就会在sources下的_posts目录下创建名称为 刚刚创建的同名md文件，可以用编辑器直接打开编辑了。 这里需要注意：在next主题的配置文件下添加了菜单后，点击了提示找不到页面，不要慌，是因为默认只生产home和Archive页面，需要自己创建相应的页面，比如about页面 hexo new page &quot;about&quot; 这时 source里面多了个目录about，里面有个index.md，就可以正常访问了，内容就在那个index.md里添加与github对接在github上新建一个名为xxx.github.io 的仓库，然后在hexo的_config.yml中的 1234deploy: type: git repository: git@github.com:hongyu2016/hongyu2016.github.io.git branch: master 填写相应的git地址，然后需要把本地项目与git仓库相关联起来，需要使用ssh来连接，git ssh连接请参考 配置git ssh 。在本地仓库与远程仓库连接的过程中可能会出现分支不匹配等错误，需要具体问题然后再进行针对性解决。本地仓库与远程仓库关联上后就可以在本地进行发布了，hexo d为发布命令，会将项目发布到github page，发布成功后，会在本地生成的静态文件推送到到github，其他文件是不会推送的，这个时候会把原本在github上的readme文件删除，不要慌，在resoures下新建readme文件再次发布就好了，注意：千万不要使用github的git push发布，这样发布是没有效果的，github会在每次push时发编译失败的邮件给你，因为github page只支持静态文件，所以只能使用hexo d命令，另外在发布前最好先hexo clean &amp;&amp; hexo g先清除和重新生成静态文件发发布。发布成功后，输入xxx.github.io就可以正常访问博客了。 结语：搭建hexo博客还是比较简单的，个人觉得在推送到github的过程中比较麻烦，容易出各种问题，这个地方需要注意。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[部署在github page的hexo博客绑定二级域名]]></title>
    <url>%2F2019%2F02%2F26%2F%E9%83%A8%E7%BD%B2%E5%9C%A8github-page%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E7%BB%91%E5%AE%9A%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[前提：已经有了域名（这里以阿里云为例）以及能成功访问的github page（这里以hexo部署的博客为例）。1.增加域名解析：这里需要注意，记录类型需要选择CNAME，主机记录为除www和@外的字符，因为我要用blog作为二级域名，所以写blog。解析线路选默认就好了，一开始我选境外，结果不行。记录值为***.github.io(即你的github page地址)。到这里解析设置完成了。 2.增加域名解析：在GitHub博客仓库的根目录中新建文件CNAME （没有后缀），里面填写 blog.iyuge.cn 注意，因为hexo在部署至github时会重新删除github的文件，所以我们必须在本地的source目录下新建CNAME文件，然后hexo clean &amp;&amp; hexo g &amp;&amp; hexo d github上就有CNAME文件了 结语：至此，给github page绑定二级域名就完成了，很简单，但是需要注意的是第一次有可能不成功需要重试几次，每次可能需要等一段时间才会生效！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
