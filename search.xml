<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt)报错问题解决办法</title>
    <url>/posts/1428c068/</url>
    <content><![CDATA[<p>第一次使用 <code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt)</code>时，以为会得到[1,2,3]这个结果，结果很不幸得到的是[1,NaN,NaN]，为什么会这样呢，其实是因为map函数传递的是三个参数<code>value,index,arry</code>,而parseInt函数传递的是<code>value,radix</code>，<code>radix</code>不传时默认使用10，表示十进制，但是如果radix在2-36之外会返回NaN。<br>好了，既然已经知道了原因，那么应该怎么修改，才能得到正确的结果呢，<br>很简单，把map和parseIntDe完整参数写出来就可以了<code>[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map((value,index,array)=&gt;parseInt(value,10));</code> 给parseInt指定10进制，用es5的写法则是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(value,<span class="number">10</span>)</span><br><span class="line">&#125;);  <span class="comment">//返回 [1,2,3]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui 上传组件函数自定义参数传递</title>
    <url>/posts/845b95cc/</url>
    <content><![CDATA[<p>有时候在表格中需要在每行中有上传需求时，需要定位到是哪一行上传的图片，然后才能组合数组发送到后端，这个时候默认的参数就无法满足我们的需求了，我们需要根据当前行的index来一一对应当前行的文件上传。比如要实现下面的效果：<br><img src="3.png"><br>要实现参数的自定义，我们需要在vue模板中修改函数调用的方式，通过类似：<code>((val)=&gt;&#123;func(val)&#125;)</code>的方式来调用相应的函数。<br><img src="1.png"><br>以及在文件编辑时要注意修改:file-list为表格中的字段，才能一一对应上<br><img src="2.png"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>element-ui 表格中的form的input动态验证规则</title>
    <url>/posts/3156ccd5/</url>
    <content><![CDATA[<h3 id="表格中的input需要做某些校验，比如，“本次报销金额”要小于“未报销金额”，这就有点麻烦了，我们都知道，element的form的验证规则rules都是在初始化的时候就定好了的，比如时间验证："><a href="#表格中的input需要做某些校验，比如，“本次报销金额”要小于“未报销金额”，这就有点麻烦了，我们都知道，element的form的验证规则rules都是在初始化的时候就定好了的，比如时间验证：" class="headerlink" title="表格中的input需要做某些校验，比如，“本次报销金额”要小于“未报销金额”，这就有点麻烦了，我们都知道，element的form的验证规则rules都是在初始化的时候就定好了的，比如时间验证："></a>表格中的input需要做某些校验，比如，“本次报销金额”要小于“未报销金额”，这就有点麻烦了，我们都知道，element的form的验证规则rules都是在初始化的时候就定好了的，比如时间验证：</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">date2:</span> [</span><br><span class="line">    &#123; <span class="attr">type:</span> <span class="string">&#x27;date&#x27;</span>, <span class="attr">required:</span> <span class="literal">true</span>, <span class="attr">message:</span> <span class="string">&#x27;请选择时间&#x27;</span>, <span class="attr">trigger:</span> <span class="string">&#x27;change&#x27;</span> &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure>
<p>而我们项目中的是这样的:<br><img src="4.png"> 又不想自定义指令来做，还是看下element能不能做吧，于是就开始看文档，发现只能用自定义rules，但是自定义指令，写死的规则也不符合要求啊，因为表格的数据都是不固定的，<br>首先我们把表格的数据源字段移到我们的form中<br><img src="1.png"><br><img src="2.png"><br><img src="3.png"><br>然后自定义规则：<br><img src="5.png"><br>这里需要用到一些技巧，比如在模板中，</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">:prop=<span class="string">&quot;`inputTaxTable.<span class="subst">$&#123;scope.$index&#125;</span>.thisApplyMoney`&quot;</span></span><br></pre></td></tr></table></figure>
<p>在需要校验的列中，<code>inputTaxTable.$&#123;scope.$index&#125;.thisApplyMoney</code> 查找当前行的数据源，</p>
<p>以及查找“未报销金额”这行的数据来跟当前金额进行对比的时候，保证找到的当前行的数据。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//field字段中包含了该行表格的index</span></span><br><span class="line">    <span class="keyword">let</span> field=rule.field;<span class="comment">//规则名称</span></span><br><span class="line">    <span class="keyword">let</span> _fieldArr=<span class="literal">[]</span>;</span><br><span class="line">    _fieldArr=field.split(<span class="character">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> _index=_fieldArr<span class="literal">[<span class="number">1</span>]</span>;<span class="comment">//得到表格的第n行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="module-access"><span class="module"><span class="identifier">Number</span>.</span></span>parse<span class="constructor">Float(<span class="params">value</span>)</span>&gt;<span class="module-access"><span class="module"><span class="identifier">Number</span>.</span></span>parse<span class="constructor">Float(<span class="params">this</span>.<span class="params">ruleForm</span>.<span class="params">inputTaxTable</span>[<span class="params">_index</span>].<span class="params">notApplyMoney</span>)</span>)&#123;</span><br><span class="line">        return callback(<span class="keyword">new</span> <span class="constructor">Error(&#x27;不可大于未报销金额&#x27;)</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        callback<span class="literal">()</span>  <span class="comment">//这里一定要这样返回，否则validate函数只会执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>js判断一个变量是对象还是数组的实用方法记录</title>
    <url>/posts/367b716d/</url>
    <content><![CDATA[<p>在实际开发中，经常需要检测一个变量的类型，是字符串、数字、布尔还是对象、数组？还是null、undefined？ 对于字符串和数字、布尔这种基本类型，用typeof()来检测就足够了，但是typeof用在数组和对象、null之间就不灵了。<br><img src="1.jpg"><br>由图中可以看出，变量为null，数组，对象的abc使用typeof检测出来的都是object，没有办法进一步区分。</p>
<h3 id="使用constructor检测"><a href="#使用constructor检测" class="headerlink" title="使用constructor检测"></a>使用constructor检测</h3><p><img src="2.jpg"></p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> obj=<span class="comment">&#123;&#125;</span>;</span><br><span class="line">console.log(arr.<span class="keyword">constructor</span> === <span class="keyword">Array</span>) <span class="comment">//true</span></span><br><span class="line">console.log(obj.<span class="keyword">constructor</span> === <span class="keyword">Array</span>) <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用instanceof"><a href="#使用instanceof" class="headerlink" title="使用instanceof"></a>使用instanceof</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">   <span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">//false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>constructor和instanceof 在iframe下使用时会失效，每个iframe都有一套环境，都有一个window，不共享原型链。</p>
<p><font color="red">下面的代码取自网络</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">&#x27;iframe&#x27;</span>); <span class="comment">//创建iframe</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(iframe); <span class="comment">//添加到body中</span></span><br><span class="line">xArray = <span class="built_in">window</span>.frames[<span class="built_in">window</span>.frames.length<span class="number">-1</span>].Array;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> xArray(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 声明数组[1,2,3]</span></span><br><span class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br><span class="line">alert(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// false </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>为什么会出现这样的情况呢？原因就是：在当前窗口引入框架，其实就是引入了window对象，当我们在遍历iframe框架里的变量时使用arr instanceof Array 或者arr.constructor === Array，要注意这个Array是当前window对象的Array，而不是构造出arr的iframe里的window，所以会返回false。</p>
<h3 id="使用toString方法"><a href="#使用toString方法" class="headerlink" title="使用toString方法"></a>使用toString方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr)); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(obj)); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用Array-isArray"><a href="#使用Array-isArray" class="headerlink" title="使用Array.isArray()"></a>使用Array.isArray()</h3><p>ECMAScript5将Array.isArray()正式引入JavaScript，目的就是准确地检测一个值是否为数组。IE9+、 Firefox 4+、Safari 5+、Opera 10.5+和 Chrome都实现了这个方法。但是在IE8之前的版本是不支持的。</p>
<p><font color="red">综合上述方法，自己封装一个函数</font></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var arr = <span class="literal">[]</span>;</span><br><span class="line">var arr2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">function</span> is<span class="constructor">ArrayFn(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (typeof <span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>isArray<span class="operator"> === </span><span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//先检测是否有isArray方法</span></span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>is<span class="constructor">Array(<span class="params">value</span>)</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//不支持isArray方法，则使用toString方法</span></span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>prototype.toString.call(value)<span class="operator"> === </span><span class="string">&quot;[object Array]&quot;</span>;</span><br><span class="line">        <span class="comment">//如果是对象则是&quot;[object Object]&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(is<span class="constructor">ArrayFn(<span class="params">arr</span>)</span>); <span class="comment">// true</span></span><br><span class="line">console.log(is<span class="constructor">ArrayFn(<span class="params">arr2</span>)</span>); <span class="comment">// false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ubantu apt-get install方式安装mysql</title>
    <url>/posts/13666/</url>
    <content><![CDATA[<h1 id="在ubantu上安装mysql并不难，主要是记录下安装数据库时居然不像windows那样选择安装位置，设置用户和密码等"><a href="#在ubantu上安装mysql并不难，主要是记录下安装数据库时居然不像windows那样选择安装位置，设置用户和密码等" class="headerlink" title="在ubantu上安装mysql并不难，主要是记录下安装数据库时居然不像windows那样选择安装位置，设置用户和密码等"></a>在ubantu上安装mysql并不难，主要是记录下安装数据库时居然不像windows那样选择安装位置，设置用户和密码等</h1><ol>
<li><code>sudo apt-get install mysql-server</code> 安装mysql核心服务</li>
<li><code>sudo apt-get install mysql-server</code> 安装mysql客户端</li>
</ol>
<p>安装完成后我们需要去mysql目录查看用户名和密码<br><code>sudo vim /etc/mysql/debain.cnf</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">host     = localhost</span><br><span class="line">user     = debian-sys-maint</span><br><span class="line">password = wrMqzOiffsyheEe1</span><br><span class="line">socket   = /var/run/mysqld/mysqld.sock</span><br><span class="line">[mysql_upgrade]</span><br><span class="line">host     = localhost</span><br><span class="line">user     = debian-sys-maint</span><br><span class="line">password = wrMqzOiffsyheEe1</span><br><span class="line">socket   = /var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们用debian-sys-maint用户来登陆<br><code>mysql -u debian-sys-maint -p</code><br>输入密码：<code>wrMqzOiffsyheEe1</code><br>然后修改密码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">PASSWORD</span>(<span class="string">&#x27;root&#x27;</span>), <span class="keyword">plugin</span>=<span class="string">&#x27;mysql_native_password&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<font color="red">
注意，authentication_string是密码 ，plugin是验证方式，这两个一定要同时改。从mysql5.7开始root的默认验证方式是auth_socket
</font>
可以输入 ` select user, plugin from mysql.user;` 查看到以下内容：
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+------------------+-----------------------+</span><br><span class="line">|<span class="string"> user             </span>|<span class="string"> plugin                </span>|</span><br><span class="line">+------------------+-----------------------+</span><br><span class="line">|<span class="string"> root             </span>|<span class="string"> auth_socket           </span>|</span><br><span class="line">|<span class="string"> mysql.session    </span>|<span class="string"> mysql_native_password </span>|</span><br><span class="line">|<span class="string"> mysql.sys        </span>|<span class="string"> mysql_native_password </span>|</span><br><span class="line">|<span class="string"> debian-sys-maint </span>|<span class="string"> mysql_native_password </span>|</span><br><span class="line">+------------------+-----------------------+</span><br><span class="line">4 rows in set (0.02 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
修改后的：
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="code">+------------------+</span>-----------------------+</span><br><span class="line">| user             | plugin                |</span><br><span class="line"><span class="code">+------------------+</span>-----------------------+</span><br><span class="line">| root             | mysql<span class="emphasis">_native_</span>password |</span><br><span class="line">| mysql.session    | mysql<span class="emphasis">_native_</span>password |</span><br><span class="line">| mysql.sys        | mysql<span class="emphasis">_native_</span>password |</span><br><span class="line">| debian-sys-maint | mysql<span class="emphasis">_native_</span>password |</span><br><span class="line"><span class="code">+------------------+</span>-----------------------+</span><br><span class="line">4 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>
mysql_native_password这种系统root用户登录时才可以登录数据库的root用户。所以需要把auth_socket改为mysql_native_password，才可以不受系统用户限制。

<p>然后<code>exit;</code>推出mysql。<code>sudo service mysql restart</code> 重启mysql服务</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack4从头构建一个简单的vue2项目</title>
    <url>/posts/b38ec8f3/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>vue早就有成熟的vue-cli工具了，现在是vue-cli 3.0了，但是觉得很有必要自己去实现一下，有助于自己技术的提高，也能更好地去了解webpack。本人是webpack菜鸟，有些资料是网上学习整理过来的。</p>
<h3 id="1-新建目录文件夹"><a href="#1-新建目录文件夹" class="headerlink" title="1.新建目录文件夹"></a>1.新建目录文件夹</h3><p>第一步当然是新建工程目录了，具体怎么建就随便了，比如我建立webpackVue这个目录</p>
<h3 id="2-新建package-json文件"><a href="#2-新建package-json文件" class="headerlink" title="2.新建package.json文件"></a>2.新建package.json文件</h3><p>package.json是nodejs项目必需的配置文件。使用<code>npm init</code>,按照提示一步步填写项目名称，作者等信息</p>
<h3 id="3-webpack配置"><a href="#3-webpack配置" class="headerlink" title="3.webpack配置"></a>3.webpack配置</h3><p>新建build文件夹<br>build目录下新建webpack.base.conf.js,webpack.dev.conf.js,webpack.prod.conf.js文件，webpack.base.conf.js是公共基础配置，webpack.dev.conf.js是生产环境配置文件，webpack.prod.conf.js是生产环境配置。<br>创建一个src目录，用来存放我们的项目源文件，然后创建main.js文件，创建一个index.html</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack4搭建vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="1.jpg"> 目录结构是这样的</p>
<p>下载webpack webpack-dev-server webpack-cli (这里webpack是局部安装)<br><code>npm i webpack webpack-dev-server webpack-cli -D</code><br>打开webpack.base.config.js，逐步添加配置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> =&#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry:&#123;</span><br><span class="line">        main: path.resolve(__dirname, <span class="string">&#x27;../src/main.js&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//输出目录</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&#x27;../dist&#x27;</span>),</span><br><span class="line">        filename: <span class="string">&#x27;[name].[hash].js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>:&#123;</span><br><span class="line">        rules:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins:[</span><br><span class="line">        <span class="keyword">new</span> webpack.HashedModuleIdsPlugin(), <span class="comment">// 解决vender后面的hash每次都改变</span></span><br><span class="line">    ],</span><br><span class="line">    resolve:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-配置loader"><a href="#4-配置loader" class="headerlink" title="4.配置loader"></a>4.配置loader</h3><p>配置babel编译代码：下载babel-loader，babel-core，babel-preset-dev。<br><code>npm i babel-loader babel-core babel-preset-env -D</code></p>
<p>babel-preset-env 帮助我们配置 babel。我们只需要告诉它我们要兼容的情况（目标运行环境），它就会自动把代码转换为兼容对应环境的代码。<br>babel-core是作为babel的核心存在，babel的核心api都在这个模块里面<br>这里有个注意的地方，就是babel的版本的问题，运行的时候根据提示安装合适的版本就好了，这里不记得是babel的哪个工具需要7的版本了。<br>在webpack.base.conf.js文件中增加babel配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="regexp">//</span>匹配.js结尾的文件</span><br><span class="line">        use: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">        exclude:<span class="regexp">/node_modules/</span> <span class="regexp">//</span>排除node_modules里面的js</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>新建.babelrc文件，.babelrc是babel全局配置文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;presets&quot;</span>:[</span><br><span class="line">        [<span class="string">&quot;env&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">&quot;targets&quot;</span>: &#123;    </span><br><span class="line">                <span class="attr">&quot;browsers&quot;</span>: [<span class="string">&quot;&gt; 1%&quot;</span>, <span class="string">&quot;last 2 versions&quot;</span>, <span class="string">&quot;not ie &lt;=8&quot;</span>],</span><br><span class="line">                <span class="comment">//&quot;chrome&quot;: 52,</span></span><br><span class="line">                <span class="comment">//&quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;safari 7&quot;]</span></span><br><span class="line">            &#125;,       </span><br><span class="line">            <span class="attr">&quot;modules&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="下载file-loader"><a href="#下载file-loader" class="headerlink" title="下载file-loader"></a>下载file-loader</h4><p><code>npm i file-loader -D</code><br>继续追加配置</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.(jpg|<span class="type">png</span>|<span class="type">svg</span>|<span class="type">gif</span>)$/,</span><br><span class="line">        use:[&#x27;file-loader&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test:/\.(woff|<span class="type">woff2</span>|<span class="type">eot</span>|<span class="type">ttf</span>|<span class="type">otf</span>)$/</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="下载css-loader，vue-style-loader，sass-loader，-node-sass，less，less-loader并配置css，scss，sass-less"><a href="#下载css-loader，vue-style-loader，sass-loader，-node-sass，less，less-loader并配置css，scss，sass-less" class="headerlink" title="下载css-loader，vue-style-loader，sass-loader， node-sass，less，less-loader并配置css，scss，sass,less"></a>下载css-loader，vue-style-loader，sass-loader， node-sass，less，less-loader并配置css，scss，sass,less</h4><p><code>npm i css-loader vue-style-loader sass-loader node-sass less-loader less -D</code></p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test:/\.(sa|sc|c)ss$/,</span><br><span class="line">        use:[</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="symbol">&#x27;vue</span>-style-loader&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="symbol">&#x27;css</span>-loader&#x27;,</span><br><span class="line">            <span class="symbol">&#x27;sass</span>-loader&#x27;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test:/\.less$/,</span><br><span class="line">        use:[</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="symbol">&#x27;vue</span>-style-loader&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="symbol">&#x27;css</span>-loader&#x27;,</span><br><span class="line">            <span class="symbol">&#x27;sass</span>-loader&#x27;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="5-处理html文件"><a href="#5-处理html文件" class="headerlink" title="5.处理html文件"></a>5.处理html文件</h3><p>下载html-webpack-plugin<br><code>npm i html-webpack-plugin -D</code></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = require(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">//在base配置文件头部引入</span></span><br><span class="line"><span class="keyword">new</span> <span class="type">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    template: <span class="type">path</span>.resolve(__dirname, <span class="string">&#x27;../index.html&#x27;</span>)</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>
<h3 id="6-解析模块的配置和配置别名"><a href="#6-解析模块的配置和配置别名" class="headerlink" title="6.解析模块的配置和配置别名"></a>6.解析模块的配置和配置别名</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 能够使用户在引入模块时不带扩展</span></span><br><span class="line">    <span class="attribute">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;css&#x27;</span>],</span><br><span class="line">    <span class="comment">//别名</span></span><br><span class="line">    <span class="attribute">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;vue$&#x27;</span>:<span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;../src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-配置webpack-dev-conf-js文件"><a href="#7-配置webpack-dev-conf-js文件" class="headerlink" title="7.配置webpack.dev.conf.js文件"></a>7.配置webpack.dev.conf.js文件</h3><p>下载 webpack-merge，用于合并配置<br><code>npm i webpack-merge -D</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.conf&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = merge(baseConfig, &#123;</span><br><span class="line">    devtool: <span class="string">&#x27;inline-source-map&#x27;</span>, <span class="comment">// 压缩方式</span></span><br><span class="line">    mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        hot: <span class="literal">true</span>, <span class="comment">// 热更新</span></span><br><span class="line">        open: <span class="literal">true</span>, <span class="comment">// 自动打开页面</span></span><br><span class="line">        contentBase: path.resolve(__dirname, <span class="string">&#x27;../src&#x27;</span>), <span class="comment">// 告诉服务从哪提供内容</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(), <span class="comment">//开启热更新</span></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="8-配置webpack-prod-conf-js"><a href="#8-配置webpack-prod-conf-js" class="headerlink" title="8.配置webpack.prod.conf.js"></a>8.配置webpack.prod.conf.js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base.conf&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = merge(baseConfig, &#123;</span><br><span class="line">    devtool: <span class="string">&#x27;source-map&#x27;</span>, <span class="comment">// 压缩方式</span></span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    plugins: [</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="9-配置vue-loader"><a href="#9-配置vue-loader" class="headerlink" title="9.配置vue-loader"></a>9.配置vue-loader</h3><p>首先要下载vue，以及vue相关的模块<br><code>npm i vue vue-loader vue-template-compiler -D</code><br>继续完善webpack.base.cond.js</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var VueLoaderPlugin=require(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span>省略部分代码...</span><br><span class="line">rules:[</span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;vue-loader&#x27;</span>],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="regexp">//</span>省略部分代码...</span><br><span class="line">plugins:[</span><br><span class="line">    new VueLoaderPlugin(), <span class="regexp">//</span> 它的职责是将你定义过的其它规则复制并应用到 .vue 文件里相应语言的块</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在src目录新建app.vue文件和main.js文件</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">//app.vue</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">str</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  export default &#123;</span></span><br><span class="line"><span class="xml">    name: &#x27;App&#x27;,</span></span><br><span class="line"><span class="xml">    data () &#123;</span></span><br><span class="line"><span class="xml">      return &#123;</span></span><br><span class="line"><span class="xml">        str: &#x27;欢迎来到自定义webpack4+vue构建&#x27;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  div &#123;</span></span><br><span class="line"><span class="xml">    color: red;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">//main.js</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    render: <span class="function"><span class="params">(h)</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="10-配置命令"><a href="#10-配置命令" class="headerlink" title="10.配置命令"></a>10.配置命令</h3><p>打开package.json文件，并配置开发和打包命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 省略代码。。。</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server  --progress --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class="line">   <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config build/webpack.prod.conf.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>npm run dev</code> 就可以启动项目了<br><img src="2.png"></p>
<h2 id="继续优化…"><a href="#继续优化…" class="headerlink" title="继续优化…"></a>继续优化…</h2><h3 id="11-区分环境引入不同地址"><a href="#11-区分环境引入不同地址" class="headerlink" title="11. 区分环境引入不同地址"></a>11. 区分环境引入不同地址</h3><p>新建config文件夹并新建dev.env.js和prod.env.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dev.env.js 开发环境配置</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    NODE_ENV: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    BASE_API: <span class="string">&quot;http://1456&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prod.env.js 生产环境配置</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    NODE_ENV: <span class="string">&quot;production&quot;</span>,    <span class="attr">BASE_API</span>: <span class="string">&quot;http://123.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="12-优化webpack配置"><a href="#12-优化webpack配置" class="headerlink" title="12.优化webpack配置"></a>12.优化webpack配置</h3><p>解决更改文件打包时dist文件没有清除，再次打包。<br>下载clean-webpack-plugin，并配置webpack.prod.conf.js文件<br><code>npm i clean-webpack-plugin -D</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>webpack.prod.conf.js</span><br><span class="line"><span class="regexp">//</span> 引入clean-webpack-plugin</span><br><span class="line">var CleanWebpackPlugin = require(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> 省略代码。。。。</span><br><span class="line">plugins: [</span><br><span class="line">    new CleanWebPackPlugin();</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据不同环境提取css<br>下载mini-css-extract-plugin，并配置webpack.prod.conf.js文件<br><code>npm i mini-css-extract-plugin -D</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.prod.conf.js</span></span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(c|sc|sa)ss$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                loader: MiniCssExtractPlugin.loader,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">            &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename: <span class="string">&#x27;[name].[hash].css&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><font color="red">webpack.base.conf.js中删除使用vue-style-loader的代码，并在webpack.dev.conf.js中定义</font></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(c|sc|sa)ss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="comment">//以上这段webpack.base.conf.js中的代码移到webpack.dev.conf.js中</span></span><br></pre></td></tr></table></figure>
<p><a href="https://link.juejin.im/?target=https://vue-loader.vuejs.org/zh/guide/extract-css.html%23webpack-4">这个配置vue-loader中有提到</a></p>
<h4 id="第三方库单独打包"><a href="#第三方库单独打包" class="headerlink" title="第三方库单独打包"></a>第三方库单独打包</h4><p>把依赖的第三方库抽取出来单独打包，加快打包进度<br>下载autodll-webpack-plugin<br><code>npm i autodll-webpack-plugin -D</code></p>
<p>在webpack.base.conf.js中配置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.base.conf.js</span></span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line"><span class="keyword">var</span> AutodllWebpackpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;autodll-webpack-plugin&#x27;</span>);</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> AutodllWebpackpackPlugin (&#123;</span><br><span class="line">        inject: <span class="literal">true</span>,</span><br><span class="line">        <span class="keyword">debugger</span>: <span class="literal">true</span>,</span><br><span class="line">        filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        path: <span class="string">&#x27;./dll&#x27;</span>,</span><br><span class="line">        entry: &#123;</span><br><span class="line">            vendor: [<span class="string">&#x27;vue&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>tips: inject 为 true，插件会自动把打包出来的第三方库文件插入到 HTML。filename 是打包后文件的名称。path 是打包后的路径。entry 是入口，vendor 是你指定的名称，数组内容就是要打包的第三方库的名称，不要写全路径，Webpack 会自动去 node_modules 中找到的。</p>
<h4 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h4><p>在 webpack.base.conf.js的 plugins 属性中添加如下插件对象<br><code>new webpack.optimize.SplitChunksPlugin()</code></p>
<h4 id="打包时压缩js和css"><a href="#打包时压缩js和css" class="headerlink" title="打包时压缩js和css"></a>打包时压缩js和css</h4><p>下载optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin</p>
<p><code>npm i uglifyjs-webpack-plugin uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin -D</code></p>
<p>在webpack.prod.conf.js中分别引入optimize-css-assets-webpack-plugin和uglifyjs-webpack-plugin并增加optimization</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">var</span> OptimizeCSSAssetsPlugin = <span class="keyword">require</span>(<span class="string">&quot;optimize-css-assets-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="built_in">var</span> UglifyJsPlugin = <span class="keyword">require</span>(<span class="string">&quot;uglifyjs-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 省略部分代码</span></span><br><span class="line">optimization: &#123;</span><br><span class="line">        minimizer: <span class="meta">[</span></span><br><span class="line">        <span class="comment">// 压缩JS</span></span><br><span class="line">        <span class="literal">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        uglifyOptions: &#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span>, <span class="comment">// 去除警告</span></span><br><span class="line">            drop_debugger: <span class="literal">true</span>, <span class="comment">// 去除debugger</span></span><br><span class="line">            drop_console: <span class="literal">true</span> <span class="comment">// 去除console.log</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">        parallel: <span class="literal">true</span>, <span class="comment">// 平行压缩</span></span><br><span class="line">        sourceMap: <span class="literal">false</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 压缩css</span></span><br><span class="line">        <span class="literal">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">    <span class="meta">]</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="css自动加前缀"><a href="#css自动加前缀" class="headerlink" title="css自动加前缀"></a>css自动加前缀</h4><p>下载postcss-loader 和autoprefixer<br><code>npm i postcss-loader autoprefixer -D</code><br>分别在webpack.dev.conf.js和webpack.prod.conf.js的use中添加postcss-loader<br>在module中的rules中的use中追加：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span>: [</span><br><span class="line">    <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>在项目下增加postcss.config.js</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置cssz加前缀</span></span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>差不多就这样了,对了，还有一点就是打包出来的html里面引用<code>/dll/vendor.js</code>需要手动改成<code>./dll/vendor.js</code>这个下次也要优化下，我记得vue-cli 2版本中有一个地方是可以配置的</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>nodejs</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下使用nexus搭建私有仓库并使用vue-cli 3 搭建组件库</title>
    <url>/posts/73a5b140/</url>
    <content><![CDATA[<p>主要分为两部分：第一部分是nexus私有仓库的搭建，第二部分是vue-cli 3的组件搭建并发布到nexus本地仓库。</p>
<h2 id="nexus私有仓库的搭建"><a href="#nexus私有仓库的搭建" class="headerlink" title="nexus私有仓库的搭建"></a>nexus私有仓库的搭建</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol>
<li>首先需要在<a href="https://www.sonatype.com/oss-thank-you-win64.zip?submissionGuid=2c6a43fc-9aa5-4acc-b995-87cb63b04d66"><font style="color:red">官网</font></a>下载nexus windows版本（注意：需要翻墙，自备梯子）。</li>
<li>以管理员身份运行cmd（注意：必须是管理员运行且必须是cmd，win10的powershell都会报错），然后切换到<code>C:\node\nexus\nexus-3.18.0-01-win64\nexus-3.18.0-01\bin</code> 软件下载后的解压目录。<br><font style="color:red">nexus启动前，最好修改下<code>C:\node\nexus\nexus-3.18.0-01-win64\nexus-3.18.0-01\bin\nexus.vmoptions</code>的配置</font>，防止出现内存不足的报错导致无法启动，我这里修改为<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-Xms600m</span></span><br><span class="line"><span class="deletion">-Xmx600m</span></span><br><span class="line"><span class="deletion">-XX:MaxDirectMemorySize=1G</span></span><br></pre></td></tr></table></figure>
默认都是约2G</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">nexus.exe /install #执行安装命令， 成功后会提示Installed<span class="built_in"> service </span><span class="string">&#x27;nexus</span></span><br><span class="line"><span class="string">nexus.exe /run #运行服务，首次运行需要等待1~2分钟</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动完毕后,进入 http://(本机IP):8081（最好是自定义电脑ip），点击右上角Sign In进行登录，默认账号 admin<br>默认密码存放在<code>C:\node\nexus\nexus-3.18.0-01-win64\sonatype-work\nexus3\**.password</code> 打开文件后复制密码串进行登录，<br>登录后会提示修改密码，修改完重新登录即可。然后<code>**.password</code>文件就会自动删除。</li>
</ol>
<h3 id="添加npm仓库"><a href="#添加npm仓库" class="headerlink" title="添加npm仓库"></a>添加npm仓库</h3><p>点击左侧菜单Repositories 查看仓库列表<br><img src="1.png"></p>
<ul>
<li>点击Create repository按钮创建仓库</li>
<li>group表示分组 hosted表示本机私有 proxy表示远程代理（中央仓库）</li>
<li>若registry配置为group（包括hosted和proxy）,首次会从hosted拉取，若无则从proxy拉取并缓存，下次则直接从缓存取</li>
</ul>
<ol>
<li><p>添加npm(proxy)仓库：<br>选择npm(proxy)<br>输入<code>Name: npmjs.org</code><br><code>Remote storage: https://registry.npmjs.org</code><br>如图：<br><img src="2.png"></p>
</li>
<li><p>添加npm(hosted)仓库：<br>选择npm(hosted)<br>输入<code>Name：npm-hosted</code>用于存放自己发布的私有包<br>如图：<br><img src="3.png"></p>
</li>
<li><p>添加npm(group)仓库：<br>选择npm(group)<br>输入<code>Name: npm-group</code>，并在Member repositories里选择之前添加的两个移到右边<br>如图：<br><img src="4.png"></p>
</li>
</ol>
<h3 id="配置与验证npm仓库"><a href="#配置与验证npm仓库" class="headerlink" title="配置与验证npm仓库"></a>配置与验证npm仓库</h3><p>添加发布角色用户及权限</p>
<ol>
<li>添加权限认证 将npm Beared Token Realm 添加至右边<br>如图：<br><img src="5.png"></li>
<li>创建nx-deploy角色并赋予一个nx-repository-view—*的权限码<br><img src="6.png"></li>
<li>创建deployer用户 同时设定角色为nx-deploy<br><img src="7.png"></li>
</ol>
<h3 id="变更依赖源"><a href="#变更依赖源" class="headerlink" title="变更依赖源"></a>变更依赖源</h3><p>安装nrm <code>npm i -g nrm</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> registry https://registry.npm.taobao.org <span class="comment">#设置为探宝源</span></span><br><span class="line">nrm <span class="keyword">add</span> <span class="keyword">private</span> <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.38</span><span class="number">.64</span>:<span class="number">8081</span>/repository/npm-<span class="keyword">all</span>/ <span class="comment">#本机ip</span></span><br><span class="line">nrm <span class="keyword">use</span> <span class="keyword">private</span> <span class="comment">#使用私有源</span></span><br></pre></td></tr></table></figure>
<h3 id="发布流程"><a href="#发布流程" class="headerlink" title="发布流程"></a>发布流程</h3><p>每次发布前记得在package.json中检查version 有没有修改，要确认比上一个版本号高</p>
<h3 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h3><p><code>yarn lib</code>或者使用npm</p>
<h3 id="登录npm"><a href="#登录npm" class="headerlink" title="登录npm"></a>登录npm</h3><p><code>npm login -registry http://192.168.38.64:8081/repository/npm-hosted/</code></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p><code>npm publish -registry http://192.168.38.64:8081/repository/npm-hosted/</code><br>发布成功后在npm-hosted 能看到发布后的包<br><img src="8.png"></p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;组件库名称&quot;</span>: <span class="string">&quot;版本号&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 组件库名称 <span class="keyword">from</span> <span class="string">&#x27;组件库名称&#x27;</span></span><br><span class="line">Vue.use(组件库名称)</span><br></pre></td></tr></table></figure>
<h3 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h3><p><code>yarn serve</code>或者使用npm</p>
<h3 id="组件库文件目录结构"><a href="#组件库文件目录结构" class="headerlink" title="组件库文件目录结构"></a>组件库文件目录结构</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">├── examples                      <span class="comment"># 示例展示  </span></span><br><span class="line">│   ├── api                       <span class="comment"># 接口类  </span></span><br><span class="line">│   ├── assets                    <span class="comment"># 资源文件夹  </span></span><br><span class="line">│   ├── common                    <span class="comment"># 工具类  </span></span><br><span class="line">│   ├── components                <span class="comment"># 项目内部组件  </span></span><br><span class="line">│   ├── page                      <span class="comment"># 页面  </span></span><br><span class="line">│   ├── router                    <span class="comment"># 路由配置  </span></span><br><span class="line">│   ├── style                     <span class="comment"># 页面样式问题，主题等  </span></span><br><span class="line">│   ├── App.vue                   <span class="comment"># 入口页面  </span></span><br><span class="line">│   ├── main.js                   <span class="comment"># 入口文件 加载组件 初始化等  </span></span><br><span class="line">├── <span class="class"><span class="keyword">lib</span>                           <span class="comment"># 编译后输出的组件目录  </span></span></span><br><span class="line">├── packages                      <span class="comment"># 公共组件目录    </span></span><br><span class="line">│   ├── query-drop-box            <span class="comment"># demo组件  </span></span><br><span class="line">│   ├── simple-input              <span class="comment"># demo组件  </span></span><br><span class="line">│   ├── index.js                  <span class="comment"># 组件入口文件  </span></span><br><span class="line">├── public                        <span class="comment"># 静态资源  </span></span><br><span class="line">│   │── favicon.ico               <span class="comment"># favicon图标  </span></span><br><span class="line">│   └── index.html                <span class="comment"># html模板  </span></span><br><span class="line">├── .gitignore                    <span class="comment"># git 配置  </span></span><br><span class="line">├── .npmignore                    <span class="comment"># npm 配置  </span></span><br><span class="line">├── vue.config.js                 <span class="comment"># vue-cli 配置  </span></span><br><span class="line">├── babel.config.js               <span class="comment"># babel 配置  </span></span><br><span class="line">├── yarn.lock                     <span class="comment"># yarn依赖 配置  </span></span><br><span class="line">└── package.json                  <span class="comment"># package.json  </span></span><br></pre></td></tr></table></figure>
<p>这里贴一下<code>vue.config.js</code>文件的配置：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">const path = require(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">function<span class="meta"> resolve(</span>dir) &#123;</span><br><span class="line">    <span class="meta">return</span> path.jo<span class="meta">in(</span>__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    pages: &#123;</span><br><span class="line">        <span class="meta">index</span>: &#123;</span><br><span class="line">            entry: <span class="string">&#x27;examples/main.js&#x27;</span>,</span><br><span class="line">            template: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">            <span class="meta">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    productionSourceMap: false,</span><br><span class="line">    css: &#123;</span><br><span class="line">        extract: false,</span><br><span class="line">        modules: false,</span><br><span class="line">        sourceMap: false,</span><br><span class="line">        loaderOptions: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 扩展 webpack 配置，使 packages 加入编译</span><br><span class="line">    chainWebpack: config =&gt; &#123;</span><br><span class="line">        config.module</span><br><span class="line">            .rule(<span class="string">&#x27;js&#x27;</span>)</span><br><span class="line">            .include</span><br><span class="line">            .<span class="meta">add</span>(<span class="string">&#x27;/packages/&#x27;</span>)</span><br><span class="line">            .<span class="meta">end</span>()</span><br><span class="line">            .use(<span class="string">&#x27;babel&#x27;</span>)</span><br><span class="line">            .loader(<span class="string">&#x27;babel-loader&#x27;</span>)</span><br><span class="line">            .tap(<span class="meta">options</span> =&gt; &#123;</span><br><span class="line">                // 修改它的选项...</span><br><span class="line">                <span class="meta">return</span> <span class="meta">options</span></span><br><span class="line">            &#125;)</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;@&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;src&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;components&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples/components&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;examples&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;common&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples/common&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;packages&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;packages&#x27;</span>))</span><br><span class="line">            .<span class="meta">set</span>(<span class="string">&#x27;api&#x27;</span>,<span class="meta"> resolve(</span><span class="string">&#x27;examples/api&#x27;</span>))</span><br><span class="line">            <span class="comment">/* 添加分析工具*/</span></span><br><span class="line">        <span class="meta">if</span> (process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            <span class="meta">if</span> (process.env.npm_config_report) &#123;</span><br><span class="line">                config</span><br><span class="line">                    .plug<span class="meta">in(</span><span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>)</span><br><span class="line">                    .use(require(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin)</span><br><span class="line">                    .<span class="meta">end</span>()</span><br><span class="line">                config.plugins.<span class="meta">delete</span>(<span class="string">&#x27;prefetch&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>一个奇葩的表格统计需求</title>
    <url>/posts/507fa396/</url>
    <content><![CDATA[<p>有个报表统计的需求，先上需求图：<br><img src="1.jpg"><br>咋一看，好像挺简单啊，不就是一个表格吗？<br>这么想那就大错特错了。这个需求实际上只有三行，也就是说需要统计“数量”，“项目造价金额”，“项目合同金额”这三个字段在不同状态下的值，也就是各列的“已报备”，“已中标”…. 等等。我们知道如果要实现这一的需求，必须要把“数量”，“项目造价金额”，“项目合同金额”这三个字段在各列中当成一个字段来处理，这样才会显示三行。比如element-ui的table的简单例子：<br><img src="2.jpg"><br><img src="3.jpg"><br>那后端就要返回这样的格式了<br><img src="4.jpg"><br><font color=red>坑就坑在我们这个后端返回的数据结构上，他说他只能按照状态查询结果返回给我！</font></p>
<h3 id="来看看他返回的数据结构是什么："><a href="#来看看他返回的数据结构是什么：" class="headerlink" title="来看看他返回的数据结构是什么："></a>来看看他返回的数据结构是什么：</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>:<span class="string">&quot;200&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;成功&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;responseBody&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>:<span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;data&quot;</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;草稿&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">0.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">17.94</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">12</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;报备中&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">0.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">103.65</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">17</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">2</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;已报备&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">0.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">5732.99</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">5</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">4</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;已中标&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">4478.88</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">18.11</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">6</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">6</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;建设中&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">14.10</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">154.01</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">7</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;已竣工&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">1.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">1.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;averageContractAmount&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countBuliding&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countContract&quot;</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">&quot;countProject&quot;</span>:<span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;dayTime&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;projStatus&quot;</span>:<span class="number">10</span>,</span><br><span class="line">                <span class="attr">&quot;projStatusName&quot;</span>:<span class="string">&quot;已删除&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;totalContractAmount&quot;</span>:<span class="number">0.00</span>,</span><br><span class="line">                <span class="attr">&quot;totalProjectAmount&quot;</span>:<span class="number">0.12</span>,</span><br><span class="line">                <span class="attr">&quot;totalReturnAmount&quot;</span>:<span class="number">0.00</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>:<span class="string">&quot;操作成功&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>projStatus</code>就是上面提到的“报备中”，“已中标”等等列的状态值了，但是这样渲染出来的表格是10行，因为他数组没有处理，直接有多少个状态有值就返回多少条记录。实际上我前端这边需要的字段是这样的 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="attr">typeName:</span> <span class="string">&#x27;数量&#x27;</span>, <span class="attr">projStatus:</span> <span class="number">1</span>, <span class="attr">total_1:</span> <span class="number">2</span>, <span class="attr">total_2:</span> <span class="number">2</span>, <span class="attr">total_3:</span> <span class="number">2</span>, <span class="attr">total_4:</span> <span class="number">2</span>, <span class="attr">total_5:</span> <span class="number">2</span>, <span class="attr">total_6:</span> <span class="number">2</span>, <span class="attr">total_7:</span> <span class="number">2</span>, <span class="attr">total_8:</span> <span class="number">2</span>, <span class="attr">total_9:</span> <span class="number">2</span>, <span class="attr">total_10:</span> <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">typeName:</span> <span class="string">&#x27;项目造价金额（万）&#x27;</span>, <span class="attr">projStatus:</span> <span class="number">1</span>, <span class="attr">total_1:</span> <span class="number">2</span>, <span class="attr">total_2:</span> <span class="number">2</span>, <span class="attr">total_3:</span> <span class="number">2</span>, <span class="attr">total_4:</span> <span class="number">2</span>, <span class="attr">total_5:</span> <span class="number">2</span>, <span class="attr">total_6:</span> <span class="number">2</span>, <span class="attr">total_7:</span> <span class="number">2</span>, <span class="attr">total_8:</span> <span class="number">2</span>, <span class="attr">total_9:</span> <span class="number">2</span>, <span class="attr">total_10:</span> <span class="number">2</span> &#125;,</span><br><span class="line"></span><br><span class="line">    &#123; <span class="attr">typeName:</span> <span class="string">&#x27;项目合同金额（万）&#x27;</span>, <span class="attr">projStatus:</span> <span class="number">1</span>, <span class="attr">total_1:</span> <span class="number">2</span>, <span class="attr">total_2:</span> <span class="number">2</span>, <span class="attr">total_3:</span> <span class="number">2</span>, <span class="attr">total_4:</span> <span class="number">2</span>, <span class="attr">total_5:</span> <span class="number">2</span>, <span class="attr">total_6:</span> <span class="number">2</span>, <span class="attr">total_7:</span> <span class="number">2</span>, <span class="attr">total_8:</span> <span class="number">2</span>, <span class="attr">total_9:</span> <span class="number">2</span>, <span class="attr">total_10:</span> <span class="number">2</span> &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这就需要自己进行艰苦的数据处理了。。。<br>根据他字段返回的 <code>countProject //数量</code> <code>totalProjectAmount //项目造价</code> <code>totalContractAmount //项目合同</code>  这三个字段分类把数据重新组合成三个数组。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">deep<span class="constructor">DealArr(<span class="params">data</span>, <span class="params">num</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> countProject = <span class="literal">[]</span>;</span><br><span class="line">    <span class="keyword">let</span> totalProjectAmount = <span class="literal">[]</span>;</span><br><span class="line">    <span class="keyword">let</span> totalContractAmount = <span class="literal">[]</span>;</span><br><span class="line">    <span class="keyword">if</span> (num<span class="operator"> === </span><span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _data = this.utils.copy(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="module-access"><span class="module"><span class="identifier">_data</span>.</span></span>length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> ind = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            const dataObj = &#123;&#125;</span><br><span class="line">            dataObj.projStatus = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            dataObj<span class="literal">[&#x27;<span class="identifier">total_</span>&#x27; + <span class="identifier">ind</span>]</span> = _data<span class="literal">[<span class="identifier">i</span>]</span>.countProject</span><br><span class="line">            countProject.push(dataObj)</span><br><span class="line">        &#125;</span><br><span class="line">        countProject.splice(<span class="number">0</span>, <span class="number">0</span>, &#123; typeName: &#x27;数量&#x27; &#125;)</span><br><span class="line">        return countProject;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num<span class="operator"> === </span><span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> _data = this.utils.copy(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="module-access"><span class="module"><span class="identifier">_data</span>.</span></span>length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> ind = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            const dataObj = &#123;&#125;</span><br><span class="line">            dataObj.projStatus = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            dataObj<span class="literal">[&#x27;<span class="identifier">total_</span>&#x27; + <span class="identifier">ind</span>]</span> = _data<span class="literal">[<span class="identifier">i</span>]</span>.totalProjectAmount</span><br><span class="line">            totalProjectAmount.push(dataObj)</span><br><span class="line">        &#125;</span><br><span class="line">        totalProjectAmount.splice(<span class="number">0</span>, <span class="number">0</span>, &#123; typeName: &#x27;项目造价金额（万）&#x27; &#125;)</span><br><span class="line">        return totalProjectAmount;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> _data = this.utils.copy(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="module-access"><span class="module"><span class="identifier">_data</span>.</span></span>length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> ind = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            const dataObj = &#123;&#125;</span><br><span class="line">            dataObj.projStatus = _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus</span><br><span class="line">            dataObj<span class="literal">[&#x27;<span class="identifier">total_</span>&#x27; + <span class="identifier">ind</span>]</span> = _data<span class="literal">[<span class="identifier">i</span>]</span>.totalContractAmount</span><br><span class="line">            totalContractAmount.push(dataObj)</span><br><span class="line">        &#125;</span><br><span class="line">        totalContractAmount.splice(<span class="number">0</span>, <span class="number">0</span>, &#123; typeName: &#x27;项目合同金额（万）&#x27; &#125;)</span><br><span class="line">        return totalContractAmount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 处理返回数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">deal<span class="constructor">Arry(<span class="params">data</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _data = this.utils.copy(data);<span class="comment">//这个data 就是后端返回的初始结构的数据</span></span><br><span class="line">    <span class="keyword">let</span> countProject = <span class="literal">[]</span>; <span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">let</span> totalProjectAmount = <span class="literal">[]</span>;<span class="comment">//项目造价</span></span><br><span class="line">    <span class="keyword">let</span> totalContractAmount = <span class="literal">[]</span>; <span class="comment">//项目合同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理出来的结果是类似 [&#123; typeName: &#x27;数量&#x27;, projStatus: 1, total_1: 2, total_2: 2, total_3: 2, total_4: 2, total_5: 2, total_6: 2, total_7: 2, total_8: 2, total_9: 2, total_10: 2 &#125;]这种数组结构</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="module-access"><span class="module"><span class="identifier">_data</span>.</span></span>length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_data<span class="literal">[<span class="identifier">i</span>]</span>.countProject<span class="operator"> || </span>_data<span class="literal">[<span class="identifier">i</span>]</span>.countProject<span class="operator"> === </span><span class="number">0</span>) &#123;</span><br><span class="line">            countProject.push(&#123;</span><br><span class="line">                projStatus: _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus,</span><br><span class="line">                countProject: _data<span class="literal">[<span class="identifier">i</span>]</span>.countProject</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_data<span class="literal">[<span class="identifier">i</span>]</span>.totalProjectAmount<span class="operator"> || </span>_data<span class="literal">[<span class="identifier">i</span>]</span>.totalProjectAmount<span class="operator"> === </span><span class="number">0</span>) &#123;</span><br><span class="line">            totalProjectAmount.push(&#123;</span><br><span class="line">                projStatus: _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus,</span><br><span class="line">                totalProjectAmount:  _data<span class="literal">[<span class="identifier">i</span>]</span>.totalProjectAmount</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_data<span class="literal">[<span class="identifier">i</span>]</span>.totalContractAmount<span class="operator"> || </span>_data<span class="literal">[<span class="identifier">i</span>]</span>.totalContractAmount<span class="operator"> === </span><span class="number">0</span>) &#123;</span><br><span class="line">            totalContractAmount.push(&#123;</span><br><span class="line">                projStatus: _data<span class="literal">[<span class="identifier">i</span>]</span>.projStatus,</span><br><span class="line">                totalContractAmount: _data<span class="literal">[<span class="identifier">i</span>]</span>.totalContractAmount</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为有三行，所以需要调用deepDealArr这个函数三次 得到各自三个数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> _countProject = this.deep<span class="constructor">DealArr(<span class="params">countProject</span>, 1)</span></span><br><span class="line">    <span class="keyword">let</span> _totalProjectAmount = this.deep<span class="constructor">DealArr(<span class="params">totalProjectAmount</span>, 2)</span></span><br><span class="line">    <span class="keyword">let</span> _totalContractAmount = this.deep<span class="constructor">DealArr(<span class="params">totalContractAmount</span>, 3)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以下是为了把数组转成对象，然后把三行对象塞进数组中，这样表格就能出来了，</span></span><br><span class="line">    关键用到了<span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>assign<span class="literal">()</span> 函数循环数组转成对象</span><br><span class="line">    <span class="keyword">let</span> _count = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> _totalP = &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> _totalC = &#123;&#125;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_countProject</span>.</span></span>map(<span class="keyword">function</span> (e,item) &#123;                        </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>assign(_count, e);</span><br><span class="line">    &#125;);       </span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_totalProjectAmount</span>.</span></span>map(<span class="keyword">function</span> (e,item) &#123;                        </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>assign(_totalP, e);</span><br><span class="line">    &#125;);        </span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">_totalContractAmount</span>.</span></span>map(<span class="keyword">function</span> (e,item) &#123;                        </span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Object</span>.</span></span>assign(_totalC, e);</span><br><span class="line">    &#125;);      </span><br><span class="line">    <span class="keyword">let</span> _newTable = <span class="literal">[</span></span><br><span class="line"><span class="literal">        <span class="identifier">_count</span>,</span></span><br><span class="line"><span class="literal">        <span class="identifier">_totalP</span>,</span></span><br><span class="line"><span class="literal">        <span class="identifier">_totalC</span></span></span><br><span class="line"><span class="literal">    ]</span></span><br><span class="line"></span><br><span class="line">    this.table.data = _newTable</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是模板文件：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;el-<span class="keyword">table</span> :data=&quot;table.data&quot; style=&quot;width: 100%; margin-top: 20px;&quot; :loading=&quot;tableLoading&quot;&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;typeName&quot; label=&quot;条目&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_1&quot; label=&quot;报备中&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_2&quot; label=&quot;已报备&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_3&quot; label=&quot;投标中&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt; </span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_4&quot; label=&quot;已中标&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_6&quot; label=&quot;在建中&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_7&quot; label=&quot;已竣工&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_9&quot; label=&quot;已关闭&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_8&quot; label=&quot;已过期&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span> prop=&quot;total_10&quot; label=&quot;已删除&quot;&gt;&lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;empty </span><br><span class="line">        v-<span class="keyword">if</span>=&quot;table.data.length == 0&quot;</span><br><span class="line">        slot=&quot;empty&quot;</span><br><span class="line">        style=&quot;height: 500px&quot;</span><br><span class="line">        tips=&quot;抱歉！暂时没有数据&quot; </span><br><span class="line">        smallTips=&quot;暂时还没有相关的数据可以展示&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;img src=&quot;~/assets/svg/table-empty.svg&quot; slot=&quot;img&quot;/&gt;</span><br><span class="line">    &lt;/empty&gt;</span><br><span class="line">&lt;/el-<span class="keyword">table</span>&gt;</span><br></pre></td></tr></table></figure>
<p>用total_的后面的数字来对应列的状态值，这样就能一一对应上了，最后附上完成的效果图</p>
<p><img src="5.jpg"></p>
]]></content>
      <categories>
        <category>vue</category>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在 create-react-app 中使用Ant Design中的坑</title>
    <url>/posts/204a2bf8/</url>
    <content><![CDATA[<h2 id="Ant-Design-中的文档有错误，参数变了"><a href="#Ant-Design-中的文档有错误，参数变了" class="headerlink" title="Ant Design 中的文档有错误，参数变了"></a>Ant Design 中的文档有错误，参数变了</h2><p>这是原来的配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// craco.config.js</span></span><br><span class="line"><span class="keyword">const</span> CracoLessPlugin = <span class="built_in">require</span>(<span class="string">&#x27;craco-less&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">          modifyVars: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125;,</span><br><span class="line">          javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是正确的配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// craco.config.js</span></span><br><span class="line"><span class="keyword">const</span> CracoLessPlugin = <span class="built_in">require</span>(<span class="string">&#x27;craco-less&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123;</span><br><span class="line">      plugin: CracoLessPlugin,</span><br><span class="line">      options: &#123;</span><br><span class="line">        lessLoaderOptions: &#123;</span><br><span class="line">           lessOptions:&#123;</span><br><span class="line">                modifyVars: &#123; <span class="string">&#x27;@primary-color&#x27;</span>: <span class="string">&#x27;#1DA57A&#x27;</span> &#125;,</span><br><span class="line">                javascriptEnabled: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react,</tag>
      </tags>
  </entry>
  <entry>
    <title>在重启阿里云ubantu后nginx、mysql、pm2等的重启</title>
    <url>/posts/c20fd3fa/</url>
    <content><![CDATA[<p>由于对linux的不熟，很多命令都记不住，2018年也是花了几天时间才把服务器环境搭起来，部署了nodejs的水研村官网前后端、部署了“账目随身记”小程序后端，并且利用nginx做了小程序需要的ssl证书转发https，现在已经忘了具体的操作了，免费ssl证书准备过期了，准备又得重新折腾了，下次一定得记录下来。<br>好了，在重启服务器之前得做点准备工作，得先找出nginx安装得目录，mysql安装得目录，到时候可以直接去到目录下直接执行例如./nginx这样来启动。我以为大多数linux安装目录都差不多，于是直接网上搜别人得，结果结果不是我想要的，后来我问了位前同事，用whereis nginx 来查找nginx的位置，然后出现了以下目录：<br><img src="2.png"><br>红色圈起来的才是我的nginx的安装目录，nginx就是可执行文件，另外，经过多次摸索和回忆，配置文件在蓝色圈起来的地方，<br>具体的位置是：<br><img src="1.png"><br><code>nginx -t</code>为查找nginx配置文件所在的目录。<br>然后默认的default配置文件我没用，我自己写了个small.conf配置文件，里面配置了syc.iyuge.cn 水研村官网前台的转发地址，以及小程序需要的account后端的https的ssl配置<br>具体代码如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">    <span class="attribute">server_name</span> small.iyuge.cn;</span><br><span class="line">    <span class="attribute">access_log</span> /var/www/log/small-access.log;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/www/log/small-<span class="literal">error</span>.log;</span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>   /etc/nginx/cert/<span class="number">214999081890300</span>.pem; <span class="comment">#指定服务器证书路径 </span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/cert/<span class="number">214999081890300</span>.key; <span class="comment">#指定私钥证书路径</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="comment">#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; <span class="comment">#指定加密算法 </span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;<span class="comment">#指定SSL服务器端支持的协议版本 </span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:3000/;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> syc.iyuge.cn; <span class="comment">#这是水研村前台官网的映射</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       </span><br><span class="line">    <span class="attribute">root</span> /root/code/shuiyancun_vue;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>至于这个证书是怎么跟我的account关联起来的，这个我还真的忘了，我没记错的话，account和shuiyancun_back都有个nginx.conf文件,去看了下，account居然没有？只有shuiyancun_back才有。<br>想起来了，原来是需要在阿里云官网开放相应的端口后，外网才能访问的，而我是用pm2来启动项目的，也会有端口号，如图：<br><img src="3.png"><br><font color=#ff6a00>至于怎么制作ssl证书，等我两个月后证书过期了，再摸索一次记录下来吧</font><br>重启mginx的方法可以去到<code>/usr/sbin/nginx</code>目录，执行./nginx 启动。启动mysql的方式可以有两种：1.和nginx一样，但是要加用户名和密码，<code>./mysql  -u root -p</code> 然后输入密码就打开数据库了；2.直接 <code>mysql -u root -p</code> 输入密码。</p>
<p>另外如果发现停止了PM2中某个项目的时候，还能运行，则说明这个程序已经以另外一种方式在运行了，我们需要查找正在运行的nodejs进程:<code>ps aux | grep node</code><br>发现有进程后，直接<code>kill 具体pid </code>就可以了</p>
<p>最后就是项目的启动了，进到项目目录执行 <code>pm2 restart（或者start） pm2.json （因为有配置文件了）</code> 就可以启动项目了<br>注意：<font color=#ff6a00>不知道为什么pm2只能监控watch一个项目，如果是两个都watch，另一个项目无法跑起来，所以我的水研村后台就不watch了</font></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个简单的深拷贝</title>
    <url>/posts/25ca6631/</url>
    <content><![CDATA[<p>在js中经常需要用到变量的拷贝，比如<code>var a=1;var b=a;</code> 这个时候修改b的值，a不会改变<code>b=2;console.log(a); //1</code>,但是需要注意，这种方式拷贝属于浅拷贝，只局限在简单类型的拷贝：string、number、boolean、null、undefiend。如果你用这种方式拷贝一个数组或者对象，那么就得注意了，</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"><span class="attribute">var</span> b=a;</span><br><span class="line"><span class="attribute">b</span>[<span class="number">0</span>]=<span class="number">66</span>;</span><br><span class="line"><span class="attribute">console</span>.log(a); //[<span class="number">66</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>可以看到，b的值变了，a也变了，所以对于数组和对象不能用这种浅拷贝，因为拷贝的只是引用地址，实际上还是同一个，不过在有一种情况下，修改复制后的变量，被复制的变量不会跟着改变，那就是复制后，给复制变量重新定义值得时候，原来的变量不会受影响，因为此时已经给复制后的变量重新分配指针了，如下面所示：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">var arr_copy = arr ;</span><br><span class="line">arr_copy = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">console.log(arr); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">console.log(arr_copy);<span class="comment">//[1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    name:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line">var obj_copy = obj ;</span><br><span class="line">obj_copy = &#123;</span><br><span class="line">    name:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    age:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line">console.log(obj.name);<span class="comment">//张三</span></span><br><span class="line">console.log(obj_copy.name);<span class="comment">//李四</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="使用递归进行深拷贝。"><a href="#使用递归进行深拷贝。" class="headerlink" title="使用递归进行深拷贝。"></a>使用递归进行深拷贝。</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car = &#123;</span><br><span class="line">    name : <span class="string">&#x27;宝马&#x27;</span>,</span><br><span class="line">    color:<span class="string">&#x27;红色&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是数组还是对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(obj)==<span class="string">&#x27;[object Object]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Object&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.toString.call(obj)==<span class="string">&#x27;[object Array]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Array&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nomal&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getType(obj)==<span class="string">&#x27;nomal&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj ;  <span class="comment">//如果是基本类型则直接返回</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> newObj = getType(obj)==<span class="string">&#x27;Object&#x27;</span>?&#123;&#125;:[];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">                newObj[key] = deepCopy(obj[key]); <span class="comment">//递归</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newCar = deepCopy(car) ;</span><br><span class="line">newInfo.name = <span class="string">&#x27;奔驰&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newCar); <span class="comment">//&#123;name:&#x27;奔驰&#x27;,color:&#x27;红色&#x27;&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(car);<span class="comment">//&#123;name:&#x27;宝马&#x27;,color:&#x27;红色&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>这里用到.hasOwnProperty是为了避免在有继承时拷贝到继承自对象中的值（也就是a继承b时,使用.hasOwnProperty就是为了只拷贝a中的变量，过滤继承自b中的变量）</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么样在别的电脑同步更新发表hexo博客？</title>
    <url>/posts/301aa86/</url>
    <content><![CDATA[<p>在git上放两个分支，一个master分支，用来存放hexo 生成public代码的（发布），另一个分支随便取名字吧比如hexo，就是放整个hexo源码的，到时候在别的电脑直接克隆hexo代码，然后写文章，发布，然后同步hexo分支代码。就可以了，很简单。<br><font color="red">注意：如果主题文件是从git克隆下来的，比如next主题，再提交之前先把next下的.git和.github文件夹删掉。如果之前没有删掉，发现next无法提交到github。此时要删掉你博客目录下的.git目录价下的index.lock文件</font><br>然后：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git rm --cached themes<span class="regexp">/next/</span></span><br><span class="line">git add themes<span class="regexp">/next/</span></span><br></pre></td></tr></table></figure>
<p> 如果一次不行，尝试多几次。<br> 这个时候就可以提交到github了</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>用Xshell登录阿里云服务器</title>
    <url>/posts/d86f9c95/</url>
    <content><![CDATA[<p>使用Xshell登录阿里云最需要注意的一个地方就是要使用阿里云服务器的公共ip，阿里云一个有两个ip，一个是公共的，一个是私有的，这个登录管理后台查看实例就可以看得到<br><img src="1.jpg"><br><img src="2.jpg"><br>最后会弹出是否接受密钥什么的，点确定就好，或者是弹出密码不对的，也重新输入密码即可。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用hexo+github搭建个人博客</title>
    <url>/posts/4443dac6/</url>
    <content><![CDATA[<h2 id="用hexo-github-page快速搭建个人静态博客"><a href="#用hexo-github-page快速搭建个人静态博客" class="headerlink" title="用hexo+github page快速搭建个人静态博客"></a>用hexo+github page快速搭建个人静态博客</h2><h3 id="1-hexo环境搭建"><a href="#1-hexo环境搭建" class="headerlink" title="1.hexo环境搭建"></a>1.hexo环境搭建</h3><p>首先需要电脑安装好了nodejs（具体安装步骤略过），还需要有github账号。打开cmd命令行，全局安装hexo <code>npm install -g hexo-cli</code> 可以使用 <code>hexo v</code> 来检查是否安装成功。<br>接下来使用hexo cli来创建项目：使用<code>hexo init</code> 就会在当前文件夹下创建了项目，当然也可以使用<code>hexo init 文件夹名称</code> 来创建文件夹的同时创建项目。接着运行 <code>npm install</code>安装依赖，注意，安装hexo的文件夹需要是空文件夹。</p>
<h3 id="2-hexo的基本使用及常见的命令"><a href="#2-hexo的基本使用及常见的命令" class="headerlink" title="2.hexo的基本使用及常见的命令"></a>2.hexo的基本使用及常见的命令</h3><p><code>hexo s</code> 使用这个命令可以在本地跑起来，可以看到cmd窗口提示项目运行在 <code>http://localhost:4000</code>，打开浏览器输入提示的地址即可访问了，不过可以看到，默认的主题有点丑，我们可以换一个，在这里我们换next这个简洁的主题。我们可以直接百度搜索hexo next主题官网或者去hexo官网找next主题都可以，我们找到next的github，克隆下来，放到博客项目的themes目录下，接下来打开根目录的配置文件_config.yml文件找到 theme，把默认的该为next，然后命令行<code>hexo clean &amp;&amp; hexo s</code>刷新页面即可成功替换主题了。<br>快速创建文章命令为 <code>hexo new &quot;文章名字&quot;</code>  执行完这个命令后就会在sources下的_posts目录下创建名称为 刚刚创建的同名md文件，可以用编辑器直接打开编辑了。</p>
<h4 id="这里需要注意：在next主题的配置文件下添加了菜单后，点击了提示找不到页面，不要慌，是因为默认只生产home和Archive页面，需要自己创建相应的页面，比如about页面-hexo-new-page-quot-about-quot-这时-source里面多了个目录about，里面有个index-md，就可以正常访问了，内容就在那个index-md里添加"><a href="#这里需要注意：在next主题的配置文件下添加了菜单后，点击了提示找不到页面，不要慌，是因为默认只生产home和Archive页面，需要自己创建相应的页面，比如about页面-hexo-new-page-quot-about-quot-这时-source里面多了个目录about，里面有个index-md，就可以正常访问了，内容就在那个index-md里添加" class="headerlink" title="这里需要注意：在next主题的配置文件下添加了菜单后，点击了提示找不到页面，不要慌，是因为默认只生产home和Archive页面，需要自己创建相应的页面，比如about页面 hexo new page &quot;about&quot; 这时 source里面多了个目录about，里面有个index.md，就可以正常访问了，内容就在那个index.md里添加"></a>这里需要注意：在next主题的配置文件下添加了菜单后，点击了提示找不到页面，不要慌，是因为默认只生产home和Archive页面，需要自己创建相应的页面，比如about页面 <code>hexo new page &quot;about&quot;</code> 这时 source里面多了个目录about，里面有个index.md，就可以正常访问了，内容就在那个index.md里添加</h4><h3 id="与github对接"><a href="#与github对接" class="headerlink" title="与github对接"></a>与github对接</h3><p>在github上新建一个名为xxx.github.io 的仓库，然后在hexo的_config.yml中的</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>: </span><br><span class="line">  <span class="attribute">type</span>: git </span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:hongyu2016/hongyu2016.github.io.git </span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>填写相应的git地址，然后需要把本地项目与git仓库相关联起来，需要使用ssh来连接，git ssh连接请参考 <a href="https://www.cnblogs.com/superGG1990/p/6844952.html">配置git ssh</a> 。在本地仓库与远程仓库连接的过程中可能会出现分支不匹配等错误，需要具体问题然后再进行针对性解决。本地仓库与远程仓库关联上后就可以在本地进行发布了，<code>hexo d</code>为发布命令，会将项目发布到github page，发布成功后，会在本地生成的静态文件推送到到github，其他文件是不会推送的，这个时候会把原本在github上的readme文件删除，不要慌，在resoures下新建readme文件再次发布就好了，注意：千万不要使用github的git push发布，这样发布是没有效果的，github会在每次push时发编译失败的邮件给你，因为github page只支持静态文件，所以只能使用<code>hexo d</code>命令，另外在发布前最好先<code>hexo clean &amp;&amp; hexo g</code>先清除和重新生成静态文件发发布。发布成功后，输入xxx.github.io就可以正常访问博客了。</p>
<h2 id="结语：搭建hexo博客还是比较简单的，个人觉得在推送到github的过程中比较麻烦，容易出各种问题，这个地方需要注意。"><a href="#结语：搭建hexo博客还是比较简单的，个人觉得在推送到github的过程中比较麻烦，容易出各种问题，这个地方需要注意。" class="headerlink" title="结语：搭建hexo博客还是比较简单的，个人觉得在推送到github的过程中比较麻烦，容易出各种问题，这个地方需要注意。"></a>结语：搭建hexo博客还是比较简单的，个人觉得在推送到github的过程中比较麻烦，容易出各种问题，这个地方需要注意。</h2>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>解决npm install安装任何包都报错的问题</title>
    <url>/posts/60785/</url>
    <content><![CDATA[<p>在ubantu18系统上，之前不知道哪里设置错了，结果用nodejs的npm install任何一个包都报错，报错信息如下：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> ERR! code ENOTFOUND</span><br><span class="line"><span class="built_in">npm</span> ERR! errno ENOTFOUND</span><br><span class="line"><span class="built_in">npm</span> ERR! network request to http://registry.cnpmjs.org/cnpm failed, reason: getaddrinfo ENOTFOUND registry.cnpmjs.org registry.cnpmjs.org:<span class="number">80</span></span><br><span class="line"><span class="built_in">npm</span> ERR! network This <span class="keyword">is</span> a problem related to network connectivity.</span><br><span class="line"><span class="built_in">npm</span> ERR! network In most cases you are behind a proxy <span class="keyword">or</span> have bad network settings.</span><br><span class="line"><span class="built_in">npm</span> ERR! network </span><br><span class="line"><span class="built_in">npm</span> ERR! network If you are behind a proxy, please make sure that the</span><br><span class="line"><span class="built_in">npm</span> ERR! network <span class="string">&#x27;proxy&#x27;</span> config <span class="keyword">is</span> set properly.  See: <span class="string">&#x27;npm help config&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">npm</span> ERR! A complete log <span class="keyword">of</span> <span class="built_in">this</span> run can be found in:</span><br><span class="line"><span class="built_in">npm</span> ERR!     <span class="regexp">/home/liu/</span>.<span class="built_in">npm</span>/_logs/<span class="number">2019</span><span class="number">-05</span><span class="number">-13</span>T12_45_42_040Z-debug.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>按照字面意思，应该是代理出了点问题，由于对npm的设置不是很了解，没办法，百度查查别人的解决办法吧。然后就真查到了，</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.cnpmjs.org</span><br></pre></td></tr></table></figure>
<p>如果提示要sudo那就加上sudo就行了。<br>验证一下 ： npm info underscore 如果有返回underscore的相应信息就表示成功了。<br>以上内容参考网址：<a href="http://www.cnblogs.com/nurdun/p/6824480.html">http://www.cnblogs.com/nurdun/p/6824480.html</a> </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>记录element-ui 二次封装table时formatter的使用问题</title>
    <url>/posts/7f247ba3/</url>
    <content><![CDATA[<h3 id="二次封装element-table表格中遇到的问题记录"><a href="#二次封装element-table表格中遇到的问题记录" class="headerlink" title="二次封装element table表格中遇到的问题记录"></a>二次封装element table表格中遇到的问题记录</h3><p>我们都知道element-ui 的table 中表格行的通过prop指定显示数据源中的字段，我们在进行二次封装时，如果数据都是很简单的字符串或者数字之类的，那就可以直接使用prop就行了，不需要做特殊的操作，但是如果是数组，那就得进行特殊的处理了。<br>我们知道element 对于表格行还提供了一个格式化的函数：formatter，常规的用法没有什么好说的了，格式化显示货币，时间等，这里要说的是当字段是数组的时候，而且要在当前列显示html元素的时候就有点蛋疼了，如果是不需要html元素，直接循环数组就行。<br>下面是element table的formatter的常规用法（来自element官网）：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">template</span>&gt;</span><br><span class="line">  &lt;el-<span class="keyword">table</span></span><br><span class="line">    :data=&quot;tableData&quot;</span><br><span class="line">    style=&quot;width: 100%&quot;</span><br><span class="line">    :<span class="keyword">default</span>-sort = &quot;&#123;prop: &#x27;date&#x27;, order: &#x27;descending&#x27;&#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span></span><br><span class="line">      prop=&quot;date&quot;</span><br><span class="line">      label=&quot;日期&quot;</span><br><span class="line">      sortable</span><br><span class="line">      width=&quot;180&quot;&gt;</span><br><span class="line">    &lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span></span><br><span class="line">      prop=&quot;name&quot;</span><br><span class="line">      label=&quot;姓名&quot;</span><br><span class="line">      sortable</span><br><span class="line">      width=&quot;180&quot;&gt;</span><br><span class="line">    &lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">    &lt;el-<span class="keyword">table</span>-<span class="keyword">column</span></span><br><span class="line">      prop=&quot;address&quot;</span><br><span class="line">      label=&quot;地址&quot;</span><br><span class="line">      :formatter=&quot;formatter&quot;&gt;</span><br><span class="line">    &lt;/el-<span class="keyword">table</span>-<span class="keyword">column</span>&gt;</span><br><span class="line">  &lt;/el-<span class="keyword">table</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">template</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        tableData: [&#123;</span><br><span class="line">          <span class="type">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="line">          <span class="type">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="type">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span><br><span class="line">          <span class="type">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="type">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span><br><span class="line">          <span class="type">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="type">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span><br><span class="line">          <span class="type">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      formatter(<span class="keyword">row</span>, <span class="keyword">column</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">row</span>.address;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>下面来说下我们项目的需求<br><img src="1.png"><br>如果不是二次封装也很容易解决，可以用template，但是我们这里说的是二次封装，这里只能用formatter函数了，父组件在调用时需要提供类似这样的数据：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">tablelable:</span>[</span><br><span class="line">    &#123;<span class="attr">lable:</span><span class="string">&#x27;表格行1&#x27;</span>,<span class="attr">prop:</span><span class="string">&#x27;prop_1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">lable:</span><span class="string">&#x27;时间&#x27;</span>,<span class="attr">prop:</span><span class="string">&#x27;time&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">lable:</span><span class="string">&#x27;附件&#x27;</span>,<span class="attr">prop:</span><span class="string">&#x27;files&#x27;</span>,</span><br><span class="line">    <span class="symbol">formatter:</span>(row,column,cellvalue,index)=&#123;</span><br><span class="line">            <span class="comment">//在这里进行格式化输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 这里提供的数据源</span></span><br><span class="line"><span class="attr">tableData:</span>[</span><br><span class="line">    &#123;<span class="attr">prop_1:</span><span class="string">&#x27;***&#x27;</span>,<span class="attr">time:</span><span class="string">&#x27;2015-20-2&#x27;</span>,<span class="attr">files:</span>[<span class="attr">name:</span><span class="string">&#x27;12.jpg&#x27;</span>,<span class="attr">url:</span><span class="string">&#x27;&#x27;</span>]&#125;,</span><br><span class="line">    &#123;<span class="attr">prop_1:</span><span class="string">&#x27;***&#x27;</span>,<span class="attr">time:</span><span class="string">&#x27;2015-20-2&#x27;</span>,<span class="attr">files:</span>[<span class="attr">name:</span><span class="string">&#x27;12.jpg&#x27;</span>,<span class="attr">url:</span><span class="string">&#x27;&#x27;</span>]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>下面贴出图片吧<br><img src="2.png"><br><img src="3.png"><br>这里的formatter必须要返回一个对象才能渲染出html，如果是返回一个字符串是没有用的，会原样输出字符串，比如’<a heref="">12.jpg</a>‘ 他不会渲染出可点击的a  而是把一整个当成字符串输出，没有渲染。<font color="red">还有一个需要注意的地方就是在这里返回的对象中的元素的属性要采用原生的写法，比如class要写成className，还有变量等也需要注意写法</font>。好了，记录下，以后再遇到就懂得处理了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>运行yarn eject 后 yarn start 报错</title>
    <url>/posts/e1691e31/</url>
    <content><![CDATA[<p>运行 yarn eject 把webpack配置暴露出来后，运行yarn start后报错，<br>报错的内容大致是 找不到 react-scripts下的config/env.js文件，然后查了下，发现node_module下 react-scripts被清空了，package.json文件<br>下也没有这个记录了，找了很多资料都没有结果，然后索性就按照这个包，按照好后就报各种插件版本低，比如webpack，babel等，然后全部升级后，启动就没有报错了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react,</tag>
      </tags>
  </entry>
  <entry>
    <title>部署在github page的hexo博客绑定二级域名</title>
    <url>/posts/a7642960/</url>
    <content><![CDATA[<h2 id="前提：已经有了域名（这里以阿里云为例）以及能成功访问的github-page（这里以hexo部署的博客为例）。"><a href="#前提：已经有了域名（这里以阿里云为例）以及能成功访问的github-page（这里以hexo部署的博客为例）。" class="headerlink" title="前提：已经有了域名（这里以阿里云为例）以及能成功访问的github page（这里以hexo部署的博客为例）。"></a>前提：已经有了域名（这里以阿里云为例）以及能成功访问的github page（这里以hexo部署的博客为例）。</h2><h3 id="1-增加域名解析："><a href="#1-增加域名解析：" class="headerlink" title="1.增加域名解析："></a>1.增加域名解析：</h3><p><img src="/images/2019-2-26.png"><br>这里需要注意，记录类型需要选择CNAME，主机记录为除www和@外的字符，因为我要用blog作为二级域名，所以写blog。解析线路选默认就好了，一开始我选境外，结果不行。记录值为<code>***.github.io</code>(即你的github page地址)。到这里解析设置完成了。</p>
<h3 id="2-增加域名解析："><a href="#2-增加域名解析：" class="headerlink" title="2.增加域名解析："></a>2.增加域名解析：</h3><p>在GitHub博客仓库的根目录中新建文件CNAME （没有后缀），里面填写 <code>blog.iyuge.cn</code> 注意，因为hexo在部署至github时会重新删除github的文件，所以我们必须在本地的source目录下新建CNAME文件，然后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d github</code>上就有CNAME文件了</p>
<h3 id="结语：至此，给github-page绑定二级域名就完成了，很简单，但是需要注意的是第一次有可能不成功需要重试几次，每次可能需要等一段时间才会生效！"><a href="#结语：至此，给github-page绑定二级域名就完成了，很简单，但是需要注意的是第一次有可能不成功需要重试几次，每次可能需要等一段时间才会生效！" class="headerlink" title="结语：至此，给github page绑定二级域名就完成了，很简单，但是需要注意的是第一次有可能不成功需要重试几次，每次可能需要等一段时间才会生效！"></a>结语：至此，给github page绑定二级域名就完成了，很简单，但是需要注意的是第一次有可能不成功需要重试几次，每次可能需要等一段时间才会生效！</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
</search>
